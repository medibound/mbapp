{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar useKeyboard = function useKeyboard() {\n  var isEnable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      keyboardHeight = _useState2[0],\n      setKeyboardHeight = _useState2[1];\n\n  function onKeyboardWillShow(e) {\n    setKeyboardHeight(e.endCoordinates.height);\n  }\n\n  function onKeyboardWillHide() {\n    setKeyboardHeight(0);\n  }\n\n  useEffect(function () {\n    var keyboardShowEvent = Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillShow';\n    var keyboardHideEvent = Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';\n\n    if (isEnable) {\n      Keyboard.addListener(keyboardShowEvent, onKeyboardWillShow);\n      Keyboard.addListener(keyboardHideEvent, onKeyboardWillHide);\n    }\n\n    return function () {\n      Keyboard.removeListener(keyboardShowEvent, onKeyboardWillShow);\n      Keyboard.removeListener(keyboardHideEvent, onKeyboardWillHide);\n    };\n  }, [isEnable]);\n  return [keyboardHeight];\n};\n\nexport default useKeyboard;","map":{"version":3,"sources":["index.tsx"],"names":["useKeyboard","isEnable","useState","setKeyboardHeight","e","useEffect","keyboardShowEvent","Platform","keyboardHideEvent","Keyboard"],"mappings":";AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;;;;AAGA,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAA+B;AAAA,MAA9BC,QAA8B,uEAA/B,IAA+B;;AAAA,kBACLC,QAAQ,CAApD,CAAoD,CADH;AAAA;AAAA,MAC3C,cAD2C;AAAA,MAC3C,iBAD2C;;AAGjD,WAAA,kBAAA,CAAA,CAAA,EAAoD;AAClDC,IAAAA,iBAAiB,CAACC,CAAC,CAADA,cAAAA,CAAlBD,MAAiB,CAAjBA;AACD;;AAED,WAAA,kBAAA,GAAoC;AAClCA,IAAAA,iBAAiB,CAAjBA,CAAiB,CAAjBA;AACD;;AAEDE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMC,iBAAiB,GACrBC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,GAAAA,iBAAAA,GADF,kBAAA;AAEA,QAAMC,iBAAiB,GACrBD,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,GAAAA,iBAAAA,GADF,kBAAA;;AAEA,QAAA,QAAA,EAAc;AACZE,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACAA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACD;;AACD,WAAO,YAAY;AACjBA,MAAAA,QAAQ,CAARA,cAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACAA,MAAAA,QAAQ,CAARA,cAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AAFF,KAAA;AATO,GAAA,EAaN,CAbHJ,QAaG,CAbM,CAATA;AAeA,SAAO,CAAP,cAAO,CAAP;AA1BF,CAAA;;AA4BA,eAAA,WAAA","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Keyboard, KeyboardEvent, Platform } from 'react-native';\n\nconst useKeyboard = (isEnable = true): [number] => {\n  const [keyboardHeight, setKeyboardHeight] = useState(0);\n\n  function onKeyboardWillShow(e: KeyboardEvent): void {\n    setKeyboardHeight(e.endCoordinates.height);\n  }\n\n  function onKeyboardWillHide(): void {\n    setKeyboardHeight(0);\n  }\n\n  useEffect(() => {\n    const keyboardShowEvent =\n      Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillShow';\n    const keyboardHideEvent =\n      Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';\n    if (isEnable) {\n      Keyboard.addListener(keyboardShowEvent, onKeyboardWillShow);\n      Keyboard.addListener(keyboardHideEvent, onKeyboardWillHide);\n    }\n    return (): void => {\n      Keyboard.removeListener(keyboardShowEvent, onKeyboardWillShow);\n      Keyboard.removeListener(keyboardHideEvent, onKeyboardWillHide);\n    };\n  }, [isEnable]);\n\n  return [keyboardHeight];\n};\nexport default useKeyboard;\n"]},"metadata":{},"sourceType":"module"}