{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { processColor } from \"./Colors\";\nimport { makeShareable } from \"./core\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { _updatePropsJS } from \"./js-reanimated\";\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nvar ColorProperties = makeShareable(colorProps);\nexport var updateProps = function () {\n  var _f = function _f(viewDescriptor, updates, maybeViewRef, adapters) {\n    var viewName = viewDescriptor.value.name || 'RCTView';\n\n    if (adapters) {\n      adapters.forEach(function (adapter) {\n        adapter(updates);\n      });\n    }\n\n    if (Platform.OS !== 'web') {\n      Object.keys(updates).forEach(function (key) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      });\n    }\n\n    var updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n  };\n\n  _f._closure = {\n    Platform: {\n      OS: Platform.OS\n    },\n    ColorProperties: ColorProperties,\n    processColor: processColor,\n    _updatePropsJS: _updatePropsJS\n  };\n  _f.asString = \"function _f(viewDescriptor,updates,maybeViewRef,adapters){const{Platform,ColorProperties,processColor,_updatePropsJS}=jsThis._closure;{var viewName=viewDescriptor.value.name||'RCTView';if(adapters){adapters.forEach(function(adapter){adapter(updates);});}if(Platform.OS!=='web'){Object.keys(updates).forEach(function(key){if(ColorProperties.indexOf(key)!==-1){updates[key]=processColor(updates[key]);}});}var updatePropsInternal=typeof _updateProps==='undefined'?_updatePropsJS:_updateProps;updatePropsInternal(viewDescriptor.value.tag,viewName,updates,maybeViewRef);}}\";\n  _f.__workletHash = 8129673021160;\n  _f.__location = \"C:\\\\Users\\\\21deg\\\\OneDrive\\\\Desktop\\\\MBAPP\\\\medibound2\\\\medibound\\\\node_modules\\\\react-native-reanimated\\\\src\\\\reanimated2\\\\UpdateProps.js (27:27)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) {\n  animatedStyle.current.value = _objectSpread(_objectSpread({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;","map":{"version":3,"sources":["C:/Users/21deg/OneDrive/Desktop/MBAPP/medibound2/medibound/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.js"],"names":["processColor","makeShareable","_updatePropsJS","colorProps","ColorProperties","updateProps","viewDescriptor","updates","maybeViewRef","adapters","viewName","value","name","forEach","adapter","Platform","OS","Object","keys","key","indexOf","updatePropsInternal","_updateProps","tag","updatePropsJestWrapper","animatedStyle","current"],"mappings":";;;;;;AACA,SAASA,YAAT;AACA,SAASC,aAAT;;AAEA,SAASC,cAAT;AAGA,IAAMC,UAAU,GAAG,CACjB,iBADiB,EAEjB,mBAFiB,EAGjB,aAHiB,EAIjB,iBAJiB,EAKjB,kBALiB,EAMjB,gBANiB,EAOjB,kBAPiB,EAQjB,gBARiB,EASjB,OATiB,EAUjB,aAViB,EAWjB,qBAXiB,EAYjB,WAZiB,EAajB,iBAbiB,EAcjB,cAdiB,CAAnB;AAiBA,IAAMC,eAAe,GAAGH,aAAa,CAACE,UAAD,CAArC;AAEA,OAAO,IAAME,WAAW;AAAA,uBACtBC,cADsB,EAEtBC,OAFsB,EAGtBC,YAHsB,EAItBC,QAJsB,EAKnB;AAGH,QAAMC,QAAQ,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,IAA6B,SAA9C;;AAEA,QAAIH,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACI,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5BA,QAAAA,OAAO,CAACP,OAAD,CAAP;AACD,OAFD;AAGD;;AAED,QAAIQ,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzBC,MAAAA,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBM,OAArB,CAA6B,UAACM,GAAD,EAAS;AACpC,YAAIf,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACvCZ,UAAAA,OAAO,CAACY,GAAD,CAAP,GAAenB,YAAY,CAACO,OAAO,CAACY,GAAD,CAAR,CAA3B;AACD;AACF,OAJD;AAKD;;AAED,QAAME,mBAAmB,GACvB,OAAOC,YAAP,KAAwB,WAAxB,GAAsCpB,cAAtC,GAAuDoB,YADzD;AAGAD,IAAAA,mBAAmB,CACjBf,cAAc,CAACK,KAAf,CAAqBY,GADJ,EAEjBb,QAFiB,EAGjBH,OAHiB,EAIjBC,YAJiB,CAAnB;AAMD,GAjCuB;;AAAA;AAAA;AAAA,UAdlBO,QAAQ,CAACC;AAcS;AAAA,qBAZdZ,eAYc;AAAA,kBAXDJ,YAWC;AAAA,oBAN0CE;AAM1C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,GAAjB;AAmCP,OAAO,IAAMsB,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpClB,cADoC,EAEpCC,OAFoC,EAGpCC,YAHoC,EAIpCC,QAJoC,EAKpCgB,aALoC,EAMjC;AACHA,EAAAA,aAAa,CAACC,OAAd,CAAsBf,KAAtB,mCACKc,aAAa,CAACC,OAAd,CAAsBf,KAD3B,GAEKJ,OAFL;AAKAF,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,CAAX;AACD,CAbM;AAeP,eAAeJ,WAAf","sourcesContent":["/* global _updateProps */\nimport { processColor } from './Colors';\nimport { makeShareable } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nconst ColorProperties = makeShareable(colorProps);\n\nexport const updateProps = (\n  viewDescriptor,\n  updates,\n  maybeViewRef,\n  adapters\n) => {\n  'worklet';\n\n  const viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (adapters) {\n    adapters.forEach((adapter) => {\n      adapter(updates);\n    });\n  }\n\n  if (Platform.OS !== 'web') {\n    Object.keys(updates).forEach((key) => {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    });\n  }\n\n  const updatePropsInternal =\n    typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n\n  updatePropsInternal(\n    viewDescriptor.value.tag,\n    viewName,\n    updates,\n    maybeViewRef\n  );\n};\n\nexport const updatePropsJestWrapper = (\n  viewDescriptor,\n  updates,\n  maybeViewRef,\n  adapters,\n  animatedStyle\n) => {\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\n\nexport default updateProps;\n"]},"metadata":{},"sourceType":"module"}