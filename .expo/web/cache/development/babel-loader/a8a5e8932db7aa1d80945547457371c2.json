{"ast":null,"code":"import interpolateNode, { Extrapolate } from \"../derived/interpolate\";\n\nvar getVal = function () {\n  var _f = function _f(config) {\n    var type = config.type,\n        coef = config.coef,\n        val = config.val,\n        ll = config.ll,\n        rr = config.rr,\n        x = config.x;\n\n    switch (type) {\n      case Extrapolate.IDENTITY:\n        return x;\n\n      case Extrapolate.CLAMP:\n        if (coef * val < coef * ll) {\n          return ll;\n        }\n\n        return rr;\n\n      case Extrapolate.EXTEND:\n      default:\n        return val;\n    }\n  };\n\n  _f._closure = {\n    Extrapolate: {\n      IDENTITY: Extrapolate.IDENTITY,\n      CLAMP: Extrapolate.CLAMP,\n      EXTEND: Extrapolate.EXTEND\n    }\n  };\n  _f.asString = \"function getVal(config){const{Extrapolate}=jsThis._closure;{var type=config.type,coef=config.coef,val=config.val,ll=config.ll,rr=config.rr,x=config.x;switch(type){case Extrapolate.IDENTITY:return x;case Extrapolate.CLAMP:if(coef*val<coef*ll){return ll;}return rr;case Extrapolate.EXTEND:default:return val;}}}\";\n  _f.__workletHash = 14030100394456;\n  _f.__location = \"C:\\\\Users\\\\21deg\\\\OneDrive\\\\Desktop\\\\MBAPP\\\\medibound2\\\\medibound\\\\node_modules\\\\react-native-reanimated\\\\src\\\\reanimated2\\\\interpolation.js (5:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar isExtrapolate = function () {\n  var _f = function _f(value) {\n    return value === Extrapolate.EXTEND || value === Extrapolate.CLAMP || value === Extrapolate.IDENTITY;\n  };\n\n  _f._closure = {\n    Extrapolate: {\n      EXTEND: Extrapolate.EXTEND,\n      CLAMP: Extrapolate.CLAMP,\n      IDENTITY: Extrapolate.IDENTITY\n    }\n  };\n  _f.asString = \"function isExtrapolate(value){const{Extrapolate}=jsThis._closure;{return value===Extrapolate.EXTEND||value===Extrapolate.CLAMP||value===Extrapolate.IDENTITY;}}\";\n  _f.__workletHash = 14994419438556;\n  _f.__location = \"C:\\\\Users\\\\21deg\\\\OneDrive\\\\Desktop\\\\MBAPP\\\\medibound2\\\\medibound\\\\node_modules\\\\react-native-reanimated\\\\src\\\\reanimated2\\\\interpolation.js (24:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar validateType = function () {\n  var _f = function _f(type) {\n    var _type;\n\n    var EXTRAPOLATE_ERROR_MSG = \"Reanimated: config object is not valid, please provide valid config, for example:\\n    interpolate(value, [inputRange], [outputRange], {\\n    extrapolateLeft: 'clamp',\\n    extrapolateRight: 'extend',\\n  })\";\n\n    var EXTRAPOLATE_ERROR = function EXTRAPOLATE_ERROR(extrapolate) {\n      return \"Reanimated: not supported value for \\\"\" + extrapolate + \"\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\"]\\n Valid example:\\n    interpolate(value, [inputRange], [outputRange], {\\n      \" + extrapolate + \": 'clamp',\\n  })\";\n    };\n\n    type = (_type = type) != null ? _type : 'extend';\n    var hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n    var hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n    if (typeof type === 'object' && (Object.keys(type).length === 2 && !(hasExtrapolateLeft && hasExtrapolateRight) || Object.keys(type).length === 1 && !(hasExtrapolateLeft || hasExtrapolateRight) || Object.keys(type).length > 2)) {\n      throw new Error(EXTRAPOLATE_ERROR_MSG);\n    }\n\n    if (typeof type === 'object') {\n      if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n        throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n      }\n\n      if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n        throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n      }\n    }\n\n    if (typeof type === 'string' && !isExtrapolate(type)) {\n      throw new Error(\"Reanimated: not supported value for \\\"interpolate\\\" \\nSupported values: [\\\"extend\\\", \\\"clamp\\\", \\\"identity\\\"]\\n Valid example:\\n       interpolate(value, [inputRange], [outputRange], \\\"clamp\\\")\");\n    }\n  };\n\n  _f._closure = {\n    isExtrapolate: isExtrapolate\n  };\n  _f.asString = \"function validateType(type){const{isExtrapolate}=jsThis._closure;{var _type;var EXTRAPOLATE_ERROR_MSG=\\\"Reanimated: config object is not valid, please provide valid config, for example:\\\\n    interpolate(value, [inputRange], [outputRange], {\\\\n    extrapolateLeft: 'clamp',\\\\n    extrapolateRight: 'extend',\\\\n  })\\\";var EXTRAPOLATE_ERROR=function EXTRAPOLATE_ERROR(extrapolate){return\\\"Reanimated: not supported value for \\\\\\\"\\\"+extrapolate+\\\"\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\"]\\\\n Valid example:\\\\n    interpolate(value, [inputRange], [outputRange], {\\\\n      \\\"+extrapolate+\\\": 'clamp',\\\\n  })\\\";};type=(_type=type)!=null?_type:'extend';var hasExtrapolateLeft=type.hasOwnProperty('extrapolateLeft');var hasExtrapolateRight=type.hasOwnProperty('extrapolateRight');if(typeof type==='object'&&(Object.keys(type).length===2&&!(hasExtrapolateLeft&&hasExtrapolateRight)||Object.keys(type).length===1&&!(hasExtrapolateLeft||hasExtrapolateRight)||Object.keys(type).length>2)){throw new Error(EXTRAPOLATE_ERROR_MSG);}if(typeof type==='object'){if(hasExtrapolateLeft&&!isExtrapolate(type.extrapolateLeft)){throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));}if(hasExtrapolateRight&&!isExtrapolate(type.extrapolateRight)){throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));}}if(typeof type==='string'&&!isExtrapolate(type)){throw new Error(\\\"Reanimated: not supported value for \\\\\\\"interpolate\\\\\\\" \\\\nSupported values: [\\\\\\\"extend\\\\\\\", \\\\\\\"clamp\\\\\\\", \\\\\\\"identity\\\\\\\"]\\\\n Valid example:\\\\n       interpolate(value, [inputRange], [outputRange], \\\\\\\"clamp\\\\\\\")\\\");}}}\";\n  _f.__workletHash = 3797456715625;\n  _f.__location = \"C:\\\\Users\\\\21deg\\\\OneDrive\\\\Desktop\\\\MBAPP\\\\medibound2\\\\medibound\\\\node_modules\\\\react-native-reanimated\\\\src\\\\reanimated2\\\\interpolation.js (34:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar internalInterpolate = function () {\n  var _f = function _f(x, l, r, ll, rr, type) {\n    if (r - l === 0) return ll;\n    var progress = (x - l) / (r - l);\n    var val = ll + progress * (rr - ll);\n    var coef = rr >= ll ? 1 : -1;\n    var config = {\n      type: type,\n      coef: coef,\n      val: val,\n      ll: ll,\n      rr: rr,\n      x: x\n    };\n    validateType(type);\n\n    if (typeof type === 'object') {\n      if (coef * val < coef * ll) {\n        return getVal(Object.assign(config, {\n          type: type.extrapolateLeft\n        }));\n      } else if (coef * val > coef * ll) {\n        return getVal(Object.assign(config, {\n          type: type.extrapolateRight\n        }));\n      }\n    }\n\n    if (coef * val < coef * ll || coef * val > coef * rr) {\n      return getVal(config);\n    }\n\n    return val;\n  };\n\n  _f._closure = {\n    validateType: validateType,\n    getVal: getVal\n  };\n  _f.asString = \"function internalInterpolate(x,l,r,ll,rr,type){const{validateType,getVal}=jsThis._closure;{if(r-l===0)return ll;var progress=(x-l)/(r-l);var val=ll+progress*(rr-ll);var coef=rr>=ll?1:-1;var config={type:type,coef:coef,val:val,ll:ll,rr:rr,x:x};validateType(type);if(typeof type==='object'){if(coef*val<coef*ll){return getVal(Object.assign(config,{type:type.extrapolateLeft}));}else if(coef*val>coef*ll){return getVal(Object.assign(config,{type:type.extrapolateRight}));}}if(coef*val<coef*ll||coef*val>coef*rr){return getVal(config);}return val;}}\";\n  _f.__workletHash = 13030957841249;\n  _f.__location = \"C:\\\\Users\\\\21deg\\\\OneDrive\\\\Desktop\\\\MBAPP\\\\medibound2\\\\medibound\\\\node_modules\\\\react-native-reanimated\\\\src\\\\reanimated2\\\\interpolation.js (88:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var interpolate = function () {\n  var _f = function _f(x, input, output, type) {\n    if (x && x.__nodeID) {\n      console.warn(\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\");\n      return interpolateNode.apply(undefined, arguments);\n    }\n\n    var length = input.length;\n    var narrowedInput = [];\n\n    if (x < input[0]) {\n      narrowedInput = [input[0], input[1], output[0], output[1]];\n    } else if (x > input[length - 1]) {\n      narrowedInput = [input[length - 2], input[length - 1], output[length - 2], output[length - 1]];\n    } else {\n      for (var i = 1; i < length; ++i) {\n        if (x <= input[i]) {\n          narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n          break;\n        }\n      }\n    }\n\n    return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n  };\n\n  _f._closure = {\n    interpolateNode: interpolateNode,\n    internalInterpolate: internalInterpolate\n  };\n  _f.asString = \"function interpolate(x,input,output,type){const{interpolateNode,internalInterpolate}=jsThis._closure;{if(x&&x.__nodeID){console.warn(\\\"interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead\\\");return interpolateNode.apply(undefined,arguments);}var length=input.length;var narrowedInput=[];if(x<input[0]){narrowedInput=[input[0],input[1],output[0],output[1]];}else if(x>input[length-1]){narrowedInput=[input[length-2],input[length-1],output[length-2],output[length-1]];}else{for(var i=1;i<length;++i){if(x<=input[i]){narrowedInput=[input[i-1],input[i],output[i-1],output[i]];break;}}}return internalInterpolate.apply({},[x].concat(narrowedInput).concat(type));}}\";\n  _f.__workletHash = 11505740393836;\n  _f.__location = \"C:\\\\Users\\\\21deg\\\\OneDrive\\\\Desktop\\\\MBAPP\\\\medibound2\\\\medibound\\\\node_modules\\\\react-native-reanimated\\\\src\\\\reanimated2\\\\interpolation.js (114:7)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["C:/Users/21deg/OneDrive/Desktop/MBAPP/medibound2/medibound/node_modules/react-native-reanimated/src/reanimated2/interpolation.js"],"names":["interpolateNode","Extrapolate","getVal","config","type","coef","val","ll","rr","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","EXTRAPOLATE_ERROR_MSG","EXTRAPOLATE_ERROR","extrapolate","hasExtrapolateLeft","hasOwnProperty","hasExtrapolateRight","Object","keys","length","Error","extrapolateLeft","extrapolateRight","internalInterpolate","l","r","progress","assign","interpolate","input","output","__nodeID","console","warn","apply","undefined","arguments","narrowedInput","i","concat"],"mappings":"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","sourcesContent":["import interpolateNode,{\n  Extrapolate\n} from '../derived/interpolate';\n\nfunction getVal(config) {\n  'worklet';\n\n  const { type, coef, val, ll, rr, x } = config;\n\n  switch (type) {\n    case Extrapolate.IDENTITY:\n      return x;\n    case Extrapolate.CLAMP:\n      if (coef * val < coef * ll) {\n        return ll;\n      }\n      return rr;\n    case Extrapolate.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return (\n    value === Extrapolate.EXTEND ||\n    value === Extrapolate.CLAMP ||\n    value === Extrapolate.IDENTITY\n  );\n}\n\nfunction validateType(type) {\n  'worklet';\n\n  const EXTRAPOLATE_ERROR_MSG = `Reanimated: config object is not valid, please provide valid config, for example:\n    interpolate(value, [inputRange], [outputRange], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'extend',\n  })`;\n\n  const EXTRAPOLATE_ERROR = (\n    extrapolate\n  ) => `Reanimated: not supported value for \"${extrapolate}\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n    interpolate(value, [inputRange], [outputRange], {\n      ${extrapolate}: 'clamp',\n  })`;\n\n  type = type ?? 'extend';\n\n  // eslint-disable-next-line no-prototype-builtins\n  const hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n  // eslint-disable-next-line no-prototype-builtins\n  const hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n  if (\n    typeof type === 'object' &&\n    ((Object.keys(type).length === 2 &&\n      !(hasExtrapolateLeft && hasExtrapolateRight)) ||\n      (Object.keys(type).length === 1 &&\n        !(hasExtrapolateLeft || hasExtrapolateRight)) ||\n      Object.keys(type).length > 2)\n  ) {\n    throw new Error(EXTRAPOLATE_ERROR_MSG);\n  }\n\n  if (typeof type === 'object') {\n    if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n    }\n\n    if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n    }\n  }\n\n  if (typeof type === 'string' && !isExtrapolate(type)) {\n    throw new Error(\n      `Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n       interpolate(value, [inputRange], [outputRange], \"clamp\")`\n    );\n  }\n}\n\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolate.CLAMP)\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n  'worklet';\n  if (r - l === 0) return ll;\n  const progress = (x - l) / (r - l);\n  const val = ll + progress * (rr - ll);\n  const coef = rr >= ll ? 1 : -1;\n\n  const config = { type, coef, val, ll, rr, x };\n\n  validateType(type);\n\n  if (typeof type === 'object') {\n    if (coef * val < coef * ll) {\n      return getVal(Object.assign(config, { type: type.extrapolateLeft }));\n    } else if (coef * val > coef * ll) {\n      return getVal(Object.assign(config, { type: type.extrapolateRight }));\n    }\n  }\n\n  if (coef * val < coef * ll || coef * val > coef * rr) {\n    return getVal(config);\n  }\n\n  return val;\n}\n\nexport function interpolate(x, input, output, type) {\n  'worklet';\n  if (x && x.__nodeID) {\n    console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n    return interpolateNode.apply(undefined, arguments);\n  }\n\n  const length = input.length;\n  let narrowedInput = [];\n  if (x < input[0]) {\n    narrowedInput = [input[0], input[1], output[0], output[1]];\n  } else if (x > input[length - 1]) {\n    narrowedInput = [\n      input[length - 2],\n      input[length - 1],\n      output[length - 2],\n      output[length - 1],\n    ];\n  } else {\n    for (let i = 1; i < length; ++i) {\n      if (x <= input[i]) {\n        narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n        break;\n      }\n    }\n  }\n  return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}\n"]},"metadata":{},"sourceType":"module"}