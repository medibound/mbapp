{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, forwardRef, useImperativeHandle, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport Interactable from 'react-native-interactable-reanimated';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\nimport { useKeyboard } from \"./Hooks\";\nimport { normalize } from \"./utils\";\nvar Screen = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height\n};\nvar Index = forwardRef(function (_ref, ref) {\n  var isBackDropDismissByPress = _ref.isBackDropDismissByPress,\n      _ref$initialPosition = _ref.initialPosition,\n      initialPosition = _ref$initialPosition === void 0 ? {\n    y: 0\n  } : _ref$initialPosition,\n      onChangeSnap = _ref.onChangeSnap,\n      onChangeKeyboardAwareSnap = _ref.onChangeKeyboardAwareSnap,\n      snapPoints = _ref.snapPoints,\n      _ref$bottomSheerColor = _ref.bottomSheerColor,\n      bottomSheerColor = _ref$bottomSheerColor === void 0 ? '#FFFFFF' : _ref$bottomSheerColor,\n      _ref$backDropColor = _ref.backDropColor,\n      backDropColor = _ref$backDropColor === void 0 ? '#000000' : _ref$backDropColor,\n      _ref$isRoundBorderWit = _ref.isRoundBorderWithTipHeader,\n      isRoundBorderWithTipHeader = _ref$isRoundBorderWit === void 0 ? false : _ref$isRoundBorderWit,\n      _ref$tipHeaderRadius = _ref.tipHeaderRadius,\n      tipHeaderRadius = _ref$tipHeaderRadius === void 0 ? 12 : _ref$tipHeaderRadius,\n      header = _ref.header,\n      body = _ref.body,\n      _ref$isBackDrop = _ref.isBackDrop,\n      isBackDrop = _ref$isBackDrop === void 0 ? false : _ref$isBackDrop,\n      isModal = _ref.isModal,\n      _ref$dragEnabled = _ref.dragEnabled,\n      dragEnabled = _ref$dragEnabled === void 0 ? true : _ref$dragEnabled,\n      isAnimatedYFromParent = _ref.isAnimatedYFromParent,\n      animatedValueY = _ref.animatedValueY,\n      containerStyle = _ref.containerStyle,\n      _ref$bodyContainerSty = _ref.bodyContainerStyle,\n      bodyContainerStyle = _ref$bodyContainerSty === void 0 ? {} : _ref$bodyContainerSty,\n      tipStyle = _ref.tipStyle,\n      headerStyle = _ref.headerStyle,\n      bodyStyle = _ref.bodyStyle,\n      onClose = _ref.onClose,\n      _ref$bounce = _ref.bounce,\n      bounce = _ref$bounce === void 0 ? 0.5 : _ref$bounce,\n      _ref$keyboardAware = _ref.keyboardAware,\n      keyboardAware = _ref$keyboardAware === void 0 ? false : _ref$keyboardAware,\n      _ref$keyboardAwareExt = _ref.keyboardAwareExtraSnapHeight,\n      keyboardAwareExtraSnapHeight = _ref$keyboardAwareExt === void 0 ? 0 : _ref$keyboardAwareExt,\n      _ref$keyboardAwareDra = _ref.keyboardAwareDrag,\n      keyboardAwareDrag = _ref$keyboardAwareDra === void 0 ? false : _ref$keyboardAwareDra;\n\n  var _useKeyboard = useKeyboard(keyboardAware),\n      _useKeyboard2 = _slicedToArray(_useKeyboard, 1),\n      keyboardHeight = _useKeyboard2[0];\n\n  var _useState = useState(initialPosition),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentSnap = _useState2[0],\n      setCurrentSnap = _useState2[1];\n\n  var _useState3 = useState(new Animated.Value(Screen.height)),\n      _useState4 = _slicedToArray(_useState3, 1),\n      _deltaY = _useState4[0];\n\n  var bottomPanel = useRef();\n\n  var _snapPoints = getSnapPoints(snapPoints);\n\n  var _initialPosition = getInitialPosition(initialPosition);\n\n  var isDismissWithPress = isBackDropDismissByPress ? isBackDropDismissByPress : false;\n\n  var _useState5 = useState(initialPosition === 0 || initialPosition === '0%'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isBottomSheetDismissed = _useState6[0],\n      setIsBottomSheetDismissed = _useState6[1];\n\n  var onDrawerSnap = function onDrawerSnap(snap) {\n    var index = snap.nativeEvent.index;\n    var value = snapPoints[index];\n    setCurrentSnap(value);\n\n    if (value === 0 || value === '0%') {\n      setIsBottomSheetDismissed(true);\n      onClose && onClose();\n    } else {\n      setIsBottomSheetDismissed(false);\n    }\n\n    onChangeSnap && onChangeSnap({\n      index: index,\n      value: value\n    });\n  };\n\n  var dismissBottomSheet = function dismissBottomSheet() {\n    var index = snapPoints.findIndex(function (x) {\n      return x === 0 || x === '0%';\n    });\n\n    if (index !== -1) {\n      bottomPanel.current.snapTo({\n        index: index\n      });\n      onClose && onClose();\n    }\n\n    Keyboard.dismiss();\n  };\n\n  var snapTo = function snapTo(index) {\n    if (snapPoints.findIndex(function (x) {\n      return x === 0 || x === '0%';\n    }) !== -1) {\n      Keyboard.dismiss();\n    }\n\n    bottomPanel.current.snapTo({\n      index: index\n    });\n    var value = snapPoints[index];\n    onChangeSnap && onChangeSnap({\n      index: index,\n      value: value\n    });\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      snapTo: snapTo,\n      dismissBottomSheet: dismissBottomSheet\n    };\n  });\n  useEffect(function () {\n    if (keyboardAware) {\n      var currentSnapHeight = normalize(currentSnap);\n\n      if (keyboardHeight) {\n        var newSnapHeight = currentSnapHeight + keyboardHeight;\n\n        if (newSnapHeight > Screen.height) {\n          bottomPanel.current.snapToPosition({\n            x: 0,\n            y: 0 - keyboardAwareExtraSnapHeight\n          });\n          onChangeKeyboardAwareSnap && onChangeKeyboardAwareSnap({\n            previousSnap: currentSnapHeight,\n            nextSnap: 0,\n            keyboardHeight: keyboardHeight\n          });\n        } else {\n          bottomPanel.current.snapToPosition({\n            x: 0,\n            y: Screen.height - newSnapHeight - keyboardAwareExtraSnapHeight\n          });\n          onChangeKeyboardAwareSnap && onChangeKeyboardAwareSnap({\n            previousSnap: currentSnapHeight,\n            nextSnap: newSnapHeight,\n            keyboardHeight: keyboardHeight\n          });\n        }\n      } else {\n        bottomPanel.current.snapToPosition({\n          x: 0,\n          y: Screen.height - currentSnapHeight\n        });\n      }\n    }\n  }, [keyboardHeight]);\n\n  var dragHandler = function dragHandler() {\n    if (dragEnabled) {\n      if (!keyboardAwareDrag && keyboardHeight > 0) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return React.createElement(View, {\n    style: styles.panelContainer,\n    pointerEvents: 'box-none'\n  }, isBackDrop && React.createElement(Animated.View, {\n    pointerEvents: !isBottomSheetDismissed ? 'auto' : 'box-none',\n    style: [styles.panelContainer, {\n      backgroundColor: backDropColor,\n      opacity: isAnimatedYFromParent ? animatedValueY.interpolate({\n        inputRange: [0, Screen.height - 100],\n        outputRange: [1, 0],\n        extrapolateRight: Extrapolate.CLAMP\n      }) : _deltaY.interpolate({\n        inputRange: [0, Screen.height - 100],\n        outputRange: [1, 0],\n        extrapolateRight: Extrapolate.CLAMP\n      })\n    }]\n  }), React.createElement(Interactable.View, {\n    dragEnabled: isModal ? false : dragHandler(),\n    verticalOnly: true,\n    ref: bottomPanel,\n    snapPoints: _snapPoints,\n    initialPosition: _initialPosition,\n    boundaries: {\n      top: isModal ? 0 : -300,\n      bounce: bounce\n    },\n    animatedValueY: isAnimatedYFromParent ? animatedValueY : _deltaY,\n    onSnap: onDrawerSnap\n  }, !isModal && isDismissWithPress && !isBottomSheetDismissed && React.createElement(TapGestureHandler, {\n    enabled: isBackDrop,\n    onActivated: dismissBottomSheet\n  }, React.createElement(View, {\n    style: {\n      height: Screen.height,\n      marginTop: -Screen.height\n    }\n  })), React.createElement(View, {\n    style: [isModal ? styles.modal : styles.panel, {\n      backgroundColor: bottomSheerColor\n    }, isRoundBorderWithTipHeader ? [{\n      backgroundColor: '#f7f5eee8',\n      shadowColor: '#000000',\n      shadowOffset: {\n        width: 0,\n        height: 0\n      },\n      shadowRadius: 5,\n      shadowOpacity: 0.4\n    }, {\n      borderTopLeftRadius: tipHeaderRadius,\n      borderTopRightRadius: tipHeaderRadius\n    }] : {}, containerStyle]\n  }, React.createElement(View, {\n    style: [isModal ? styles.modal : styles.panel, bodyContainerStyle]\n  }, !isModal && isRoundBorderWithTipHeader && React.createElement(View, {\n    style: [styles.panelHandle, tipStyle]\n  }), !isModal && React.createElement(View, {\n    style: [styles.panelHeader, headerStyle]\n  }, header), React.createElement(View, {\n    style: bodyStyle\n  }, body)))));\n});\nexport default Index;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  panelHandle: {\n    position: 'absolute',\n    alignSelf: 'center',\n    width: 40,\n    height: 6,\n    borderRadius: 4,\n    backgroundColor: '#00000040',\n    marginVertical: 8\n  },\n  panel: {\n    height: Screen.height + 300\n  },\n  modal: {\n    height: Screen.height + 300\n  },\n  panelHeader: {\n    padding: 16\n  },\n  panelContainer: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n});\n\nvar getSnapPoints = function getSnapPoints(snapPoints) {\n  return snapPoints.map(function (snapItem) {\n    if (typeof snapItem === 'string') {\n      var parentValue = snapItem.split('%')[0];\n      snapItem = Screen.height / 100 * parentValue;\n    }\n\n    var snapObject = {\n      y: Screen.height - snapItem\n    };\n    return snapObject;\n  });\n};\n\nvar getInitialPosition = function getInitialPosition(snapPoint) {\n  if (typeof snapPoint === 'string') {\n    var parentValue = snapPoint.split('%')[0];\n    snapPoint = Screen.height / 100 * parentValue;\n  }\n\n  var snapObject = {\n    y: Screen.height - snapPoint\n  };\n  return snapObject;\n};","map":{"version":3,"sources":["index.tsx"],"names":["Screen","width","Dimensions","height","Index","forwardRef","initialPosition","y","bottomSheerColor","backDropColor","isRoundBorderWithTipHeader","tipHeaderRadius","isBackDrop","dragEnabled","bodyContainerStyle","bounce","keyboardAware","keyboardAwareExtraSnapHeight","keyboardAwareDrag","useKeyboard","useState","Animated","bottomPanel","useRef","_snapPoints","getSnapPoints","_initialPosition","getInitialPosition","isDismissWithPress","isBackDropDismissByPress","onDrawerSnap","snap","index","value","snapPoints","setCurrentSnap","setIsBottomSheetDismissed","onClose","onChangeSnap","dismissBottomSheet","x","Keyboard","snapTo","useImperativeHandle","useEffect","currentSnapHeight","normalize","newSnapHeight","onChangeKeyboardAwareSnap","previousSnap","nextSnap","keyboardHeight","dragHandler","styles","backgroundColor","opacity","isAnimatedYFromParent","inputRange","outputRange","extrapolateRight","Extrapolate","CLAMP","isModal","top","marginTop","shadowColor","shadowOffset","shadowRadius","shadowOpacity","borderTopLeftRadius","borderTopRightRadius","bodyStyle","container","flex","panelHandle","position","alignSelf","borderRadius","marginVertical","panel","modal","panelHeader","padding","panelContainer","bottom","left","right","snapItem","parentValue","snapObject","snapPoint"],"mappings":";AAAA,OAAA,KAAA,IAAA,QAAA,EAAA,MAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,SAAA,QAAA,OAAA;;;;;AAiBA,OAAA,QAAA,IAAA,WAAA,QAAA,yBAAA;AACA,OAAA,YAAA,MAAA,sCAAA;AACA,SAAA,iBAAA,QAAA,8BAAA;AACA,SAAA,WAAA;AACA,SAAA,SAAA;AAEA,IAAMA,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAEC,UAAU,CAAVA,GAAAA,CAAAA,QAAAA,EADM,KAAA;AAEbC,EAAAA,MAAM,EAAED,UAAU,CAAVA,GAAAA,CAAAA,QAAAA,EAAyBC;AAFpB,CAAf;AAgCA,IAAMC,KAAK,GAAGC,UAAU,CACtB,gBAAA,GAAA,EA8BK;AAAA,MA7BH,wBA6BG,QA7BH,wBA6BG;AAAA,kCA3BDC,eA2BC;AAAA,MA3BDA,eA2BC,qCA3BiB;AAAEC,IAAAA,CAAC,EAAE;AAAL,GA2BjB;AAAA,MA7BH,YA6BG,QA7BH,YA6BG;AAAA,MA7BH,yBA6BG,QA7BH,yBA6BG;AAAA,MA7BH,UA6BG,QA7BH,UA6BG;AAAA,mCAvBDC,gBAuBC;AAAA,MAvBDA,gBAuBC,sCA7BH,SA6BG;AAAA,gCAtBDC,aAsBC;AAAA,MAtBDA,aAsBC,mCA7BH,SA6BG;AAAA,mCArBDC,0BAqBC;AAAA,MArBDA,0BAqBC,sCA7BH,KA6BG;AAAA,kCApBDC,eAoBC;AAAA,MApBDA,eAoBC,qCA7BH,EA6BG;AAAA,MA7BH,MA6BG,QA7BH,MA6BG;AAAA,MA7BH,IA6BG,QA7BH,IA6BG;AAAA,6BAjBDC,UAiBC;AAAA,MAjBDA,UAiBC,gCA7BH,KA6BG;AAAA,MA7BH,OA6BG,QA7BH,OA6BG;AAAA,8BAfDC,WAeC;AAAA,MAfDA,WAeC,iCA7BH,IA6BG;AAAA,MA7BH,qBA6BG,QA7BH,qBA6BG;AAAA,MA7BH,cA6BG,QA7BH,cA6BG;AAAA,MA7BH,cA6BG,QA7BH,cA6BG;AAAA,mCAXDC,kBAWC;AAAA,MAXDA,kBAWC,sCA7BH,EA6BG;AAAA,MA7BH,QA6BG,QA7BH,QA6BG;AAAA,MA7BH,WA6BG,QA7BH,WA6BG;AAAA,MA7BH,SA6BG,QA7BH,SA6BG;AAAA,MA7BH,OA6BG,QA7BH,OA6BG;AAAA,yBANDC,MAMC;AAAA,MANDA,MAMC,4BA7BH,GA6BG;AAAA,gCALDC,aAKC;AAAA,MALDA,aAKC,mCA7BH,KA6BG;AAAA,mCAJDC,4BAIC;AAAA,MAJDA,4BAIC,sCA7BH,CA6BG;AAAA,mCAHDC,iBAGC;AAAA,MAHDA,iBAGC,sCAHmB,KAGnB;;AAAA,qBACsBC,WAAW,CAApC,aAAoC,CADjC;AAAA;AAAA,MACG,cADH;;AAAA,kBAEmCC,QAAQ,CAA9C,eAA8C,CAF3C;AAAA;AAAA,MAEG,WAFH;AAAA,MAEG,cAFH;;AAAA,mBAGeA,QAAQ,CAAC,IAAIC,QAAQ,CAAZ,KAAA,CAAmBrB,MAAM,CAApD,MAA2B,CAAD,CAHvB;AAAA;AAAA,MAGG,OAHH;;AAIH,MAAMsB,WAAW,GAAGC,MAApB,EAAA;;AACA,MAAMC,WAAW,GAAGC,aAAa,CAAjC,UAAiC,CAAjC;;AACA,MAAMC,gBAAgB,GAAGC,kBAAkB,CAA3C,eAA2C,CAA3C;;AACA,MAAMC,kBAAkB,GAAGC,wBAAwB,GAAA,wBAAA,GAAnD,KAAA;;AAPG,mBAaCT,QAAQ,CAAUd,eAAe,KAAfA,CAAAA,IAAyBA,eAAe,KAH9D,IAGY,CAbT;AAAA;AAAA,MAUG,sBAVH;AAAA,MAUG,yBAVH;;AAeH,MAAMwB,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,IAAD,EAAe;AAClC,QAAMC,KAAK,GAAGD,IAAI,CAAJA,WAAAA,CAAd,KAAA;AACA,QAAME,KAAK,GAAGC,UAAU,CAAxB,KAAwB,CAAxB;AACAC,IAAAA,cAAc,CAHoB,KAGpB,CAAdA;;AACA,QAAIF,KAAK,KAALA,CAAAA,IAAeA,KAAK,KAAxB,IAAA,EAAmC;AACjCG,MAAAA,yBAAyB,CAAzBA,IAAyB,CAAzBA;AACAC,MAAAA,OAAO,IAAIA,OAAXA,EAAAA;AAFF,KAAA,MAGO;AACLD,MAAAA,yBAAyB,CAAzBA,KAAyB,CAAzBA;AACD;;AACDE,IAAAA,YAAY,IAAIA,YAAY,CAAC;AAAEN,MAAAA,KAAF,EAAEA,KAAF;AAASC,MAAAA,KAAAA,EAAAA;AAAT,KAAD,CAA5BK;AAVF,GAAA;;AAaA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,QAAIP,KAAK,GAAGE,UAAU,CAAVA,SAAAA,CACTM,UAAAA,CAAD;AAAA,aAAwBA,CAAC,KAADA,CAAAA,IAAWA,CAAC,KADtC,IACE;AAAA,KADUN,CAAZ;;AAGA,QAAIF,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChBV,MAAAA,WAAW,CAAXA,OAAAA,CAAAA,MAAAA,CAA2B;AAAEU,QAAAA,KAAAA,EAAAA;AAAF,OAA3BV;AACAe,MAAAA,OAAO,IAAIA,OAAXA,EAAAA;AACD;;AACDI,IAAAA,QAAQ,CAARA,OAAAA;AARF,GAAA;;AAWA,MAAMC,MAAM,GAAIV,SAAVU,MAAUV,CAAAA,KAAD,EAAmB;AAChC,QAAIE,UAAU,CAAVA,SAAAA,CAAsBM,UAAAA,CAAD;AAAA,aAAOA,CAAC,KAADA,CAAAA,IAAWA,CAAC,KAAxCN,IAAqB;AAAA,KAArBA,MAAuD,CAA3D,CAAA,EAA+D;AAC7DO,MAAAA,QAAQ,CAARA,OAAAA;AACD;;AACDnB,IAAAA,WAAW,CAAXA,OAAAA,CAAAA,MAAAA,CAA2B;AAAEU,MAAAA,KAAAA,EAAAA;AAAF,KAA3BV;AACA,QAAMW,KAAK,GAAGC,UAAU,CAAxB,KAAwB,CAAxB;AACAI,IAAAA,YAAY,IAAIA,YAAY,CAAC;AAAEN,MAAAA,KAAF,EAAEA,KAAF;AAASC,MAAAA,KAAAA,EAAAA;AAAT,KAAD,CAA5BK;AANF,GAAA;;AASAK,EAAAA,mBAAmB,CAAA,GAAA,EAAM;AAAA,WAAO;AAC9BD,MAAAA,MAD8B,EAC9BA,MAD8B;AAE9BH,MAAAA,kBAAAA,EAAAA;AAF8B,KAAP;AAAA,GAAN,CAAnBI;AAKAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAA,aAAA,EAAmB;AACjB,UAAMC,iBAAiB,GAAGC,SAAS,CAAnC,WAAmC,CAAnC;;AACA,UAAA,cAAA,EAAoB;AAClB,YAAMC,aAAa,GAAGF,iBAAiB,GAAvC,cAAA;;AACA,YAAIE,aAAa,GAAG/C,MAAM,CAA1B,MAAA,EAAmC;AACjCsB,UAAAA,WAAW,CAAXA,OAAAA,CAAAA,cAAAA,CAAmC;AACjCkB,YAAAA,CAAC,EADgC,CAAA;AAEjCjC,YAAAA,CAAC,EAAE,IAAIU;AAF0B,WAAnCK;AAIA0B,UAAAA,yBAAyB,IACvBA,yBAAyB,CAAC;AACxBC,YAAAA,YAAY,EADY,iBAAA;AAExBC,YAAAA,QAAQ,EAFgB,CAAA;AAGxBC,YAAAA,cAAAA,EAAAA;AAHwB,WAAD,CAD3BH;AALF,SAAA,MAWO;AACL1B,UAAAA,WAAW,CAAXA,OAAAA,CAAAA,cAAAA,CAAmC;AACjCkB,YAAAA,CAAC,EADgC,CAAA;AAEjCjC,YAAAA,CAAC,EAAEP,MAAM,CAANA,MAAAA,GAAAA,aAAAA,GAAgCiB;AAFF,WAAnCK;AAIA0B,UAAAA,yBAAyB,IACvBA,yBAAyB,CAAC;AACxBC,YAAAA,YAAY,EADY,iBAAA;AAExBC,YAAAA,QAAQ,EAFgB,aAAA;AAGxBC,YAAAA,cAAAA,EAAAA;AAHwB,WAAD,CAD3BH;AAMD;AAxBH,OAAA,MAyBO;AACL1B,QAAAA,WAAW,CAAXA,OAAAA,CAAAA,cAAAA,CAAmC;AACjCkB,UAAAA,CAAC,EADgC,CAAA;AAEjCjC,UAAAA,CAAC,EAAEP,MAAM,CAANA,MAAAA,GAAgB6C;AAFc,SAAnCvB;AAID;AACF;AAlCM,GAAA,EAmCN,CAnCHsB,cAmCG,CAnCM,CAATA;;AAqCA,MAAMQ,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAA,WAAA,EAAiB;AACf,UAAI,CAAA,iBAAA,IAAsBD,cAAc,GAAxC,CAAA,EAA8C;AAC5C,eAAA,KAAA;AADF,OAAA,MAEO;AACL,eAAA,IAAA;AACD;AACF;;AACD,WAAA,KAAA;AARF,GAAA;;AAWA,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEE,MAAM,CAAnB,cAAA;AAAoC,IAAA,aAAa,EAAE;AAAnD,GAAA,EAEGzC,UAAU,IACT,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,aAAa,EAAE,CAAA,sBAAA,GAAA,MAAA,GADjB,UAAA;AAEE,IAAA,KAAK,EAAE,CACLyC,MAAM,CADD,cAAA,EAEL;AACEC,MAAAA,eAAe,EADjB,aAAA;AAEEC,MAAAA,OAAO,EAAEC,qBAAqB,GAC1B,cAAc,CAAd,WAAA,CAA2B;AACzBC,QAAAA,UAAU,EAAE,CAAA,CAAA,EAAIzD,MAAM,CAANA,MAAAA,GADS,GACb,CADa;AAEzB0D,QAAAA,WAAW,EAAE,CAAA,CAAA,EAFY,CAEZ,CAFY;AAGzBC,QAAAA,gBAAgB,EAAEC,WAAW,CAACC;AAHL,OAA3B,CAD0B,GAM1B,OAAO,CAAP,WAAA,CAAoB;AAClBJ,QAAAA,UAAU,EAAE,CAAA,CAAA,EAAIzD,MAAM,CAANA,MAAAA,GADE,GACN,CADM;AAElB0D,QAAAA,WAAW,EAAE,CAAA,CAAA,EAFK,CAEL,CAFK;AAGlBC,QAAAA,gBAAgB,EAAEC,WAAW,CAACC;AAHZ,OAApB;AARN,KAFK;AAFT,GAAA,CAHJ,EAyBE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,IAAA,EAAA;AACE,IAAA,WAAW,EAAEC,OAAO,GAAA,KAAA,GAAWV,WADjC,EAAA;AAEE,IAAA,YAAY,EAFd,IAAA;AAGE,IAAA,GAAG,EAHL,WAAA;AAIE,IAAA,UAAU,EAJZ,WAAA;AAKE,IAAA,eAAe,EALjB,gBAAA;AAME,IAAA,UAAU,EAAE;AAAEW,MAAAA,GAAG,EAAED,OAAO,GAAA,CAAA,GAAO,CAArB,GAAA;AAA2B/C,MAAAA,MAAM,EAAEA;AAAnC,KANd;AAOE,IAAA,cAAc,EAAEyC,qBAAqB,GAAA,cAAA,GAPvC,OAAA;AAQE,IAAA,MAAM,EAAE1B;AARV,GAAA,EAUG,CAAA,OAAA,IAAA,kBAAA,IAAkC,CAAlC,sBAAA,IACC,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,IAAA,OAAO,EADT,UAAA;AAEE,IAAA,WAAW,EAAES;AAFf,GAAA,EAIE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLpC,MAAAA,MAAM,EAAEH,MAAM,CADT,MAAA;AAELgE,MAAAA,SAAS,EAAE,CAAChE,MAAM,CAACG;AAFd;AADT,GAAA,CAJF,CAXJ,EAwBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACL2D,OAAO,GAAGT,MAAM,CAAT,KAAA,GAAkBA,MAAM,CAD1B,KAAA,EAEL;AAAEC,MAAAA,eAAe,EAAE9C;AAAnB,KAFK,EAGLE,0BAA0B,GACtB,CACE;AACE4C,MAAAA,eAAe,EADjB,WAAA;AAEEW,MAAAA,WAAW,EAFb,SAAA;AAGEC,MAAAA,YAAY,EAAE;AAAEjE,QAAAA,KAAK,EAAP,CAAA;AAAYE,QAAAA,MAAM,EAAE;AAApB,OAHhB;AAIEgE,MAAAA,YAAY,EAJd,CAAA;AAKEC,MAAAA,aAAa,EAAE;AALjB,KADF,EAQE;AACEC,MAAAA,mBAAmB,EADrB,eAAA;AAEEC,MAAAA,oBAAoB,EAAE3D;AAFxB,KARF,CADsB,GAHrB,EAAA,EAAA,cAAA;AADT,GAAA,EAsBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLmD,OAAO,GAAGT,MAAM,CAAT,KAAA,GAAkBA,MAAM,CAD1B,KAAA,EAAA,kBAAA;AADT,GAAA,EAMG,CAAA,OAAA,IAAA,0BAAA,IACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACA,MAAM,CAAP,WAAA,EAAA,QAAA;AAAb,GAAA,CAPJ,EASG,CAAA,OAAA,IACC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAACA,MAAM,CAAP,WAAA,EAAA,WAAA;AAAb,GAAA,EAVJ,MAUI,CAVJ,EAYE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEkB;AAAb,GAAA,EApFV,IAoFU,CAZF,CAtBF,CAxBF,CAzBF,CADF;AApIJ,CAAwB,CAAxB;AAiOA,eAAA,KAAA;AAEA,IAAMlB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BmB,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EADG,UAAA;AAEXC,IAAAA,SAAS,EAFE,QAAA;AAGX3E,IAAAA,KAAK,EAHM,EAAA;AAIXE,IAAAA,MAAM,EAJK,CAAA;AAKX0E,IAAAA,YAAY,EALD,CAAA;AAMXvB,IAAAA,eAAe,EANJ,WAAA;AAOXwB,IAAAA,cAAc,EAAE;AAPL,GAJkB;AAa/BC,EAAAA,KAAK,EAAE;AACL5E,IAAAA,MAAM,EAAEH,MAAM,CAANA,MAAAA,GAAgB;AADnB,GAbwB;AAgB/BgF,EAAAA,KAAK,EAAE;AACL7E,IAAAA,MAAM,EAAEH,MAAM,CAANA,MAAAA,GAAgB;AADnB,GAhBwB;AAmB/BiF,EAAAA,WAAW,EAAE;AACXC,IAAAA,OAAO,EAAE;AADE,GAnBkB;AAsB/BC,EAAAA,cAAc,EAAE;AACdR,IAAAA,QAAQ,EADM,UAAA;AAEdZ,IAAAA,GAAG,EAFW,CAAA;AAGdqB,IAAAA,MAAM,EAHQ,CAAA;AAIdC,IAAAA,IAAI,EAJU,CAAA;AAKdC,IAAAA,KAAK,EAAE;AALO;AAtBe,CAAlB,CAAf;;AA+BA,IAAM7D,aAAa,GAAIS,SAAjBT,aAAiBS,CAAAA,UAAD,EAAqB;AACzC,SAAO,UAAU,CAAV,GAAA,CAAgBqD,UAAAA,QAAD,EAAmB;AACvC,QAAI,OAAA,QAAA,KAAJ,QAAA,EAAkC;AAChC,UAAMC,WAAgB,GAAGD,QAAQ,CAARA,KAAAA,CAAAA,GAAAA,EAAzB,CAAyBA,CAAzB;AACAA,MAAAA,QAAQ,GAAIvF,MAAM,CAANA,MAAAA,GAAD,GAACA,GAAZuF,WAAAA;AACD;;AACD,QAAME,UAAU,GAAG;AAAElF,MAAAA,CAAC,EAAEP,MAAM,CAANA,MAAAA,GAAgBuF;AAArB,KAAnB;AACA,WAAA,UAAA;AANF,GAAO,CAAP;AADF,CAAA;;AAWA,IAAM5D,kBAAkB,GAAI+D,SAAtB/D,kBAAsB+D,CAAAA,SAAD,EAAoB;AAC7C,MAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AACjC,QAAMF,WAAgB,GAAGE,SAAS,CAATA,KAAAA,CAAAA,GAAAA,EAAzB,CAAyBA,CAAzB;AACAA,IAAAA,SAAS,GAAI1F,MAAM,CAANA,MAAAA,GAAD,GAACA,GAAb0F,WAAAA;AACD;;AACD,MAAMD,UAAU,GAAG;AAAElF,IAAAA,CAAC,EAAEP,MAAM,CAANA,MAAAA,GAAgB0F;AAArB,GAAnB;AACA,SAAA,UAAA;AANF,CAAA","sourcesContent":["import React, {\n  useState,\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n} from 'react';\n\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  Keyboard,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport Interactable from 'react-native-interactable-reanimated';\nimport { TapGestureHandler } from 'react-native-gesture-handler';\nimport { useKeyboard } from './Hooks';\nimport { normalize } from './utils';\n\nconst Screen = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height,\n};\ntype Porps = {\n  isBackDropDismissByPress: boolean;\n  initialPosition: object | any;\n  onChangeSnap: (data: object) => void;\n  onChangeKeyboardAwareSnap: (data: object) => void;\n  snapPoints: Array<any>;\n  bottomSheerColor: string;\n  backDropColor: string;\n  isRoundBorderWithTipHeader: boolean;\n  tipHeaderRadius: number;\n  header: React.ReactNode;\n  body: React.ReactNode;\n  isBackDrop: boolean;\n  isModal: boolean;\n  dragEnabled: boolean;\n  isAnimatedYFromParent: boolean;\n  animatedValueY: any;\n  containerStyle: StyleProp<ViewStyle>;\n  bodyContainerStyle: StyleProp<ViewStyle>;\n  tipStyle: StyleProp<ViewStyle>;\n  headerStyle: StyleProp<ViewStyle>;\n  bodyStyle: StyleProp<ViewStyle>;\n  onClose: () => void;\n  bounce: number;\n  keyboardAware?: boolean;\n  keyboardAwareExtraSnapHeight?: number;\n  keyboardAwareDrag?: boolean;\n};\nconst Index = forwardRef(\n  (\n    {\n      isBackDropDismissByPress,\n      initialPosition = { y: 0 },\n      onChangeSnap,\n      onChangeKeyboardAwareSnap,\n      snapPoints,\n      bottomSheerColor = '#FFFFFF',\n      backDropColor = '#000000',\n      isRoundBorderWithTipHeader = false,\n      tipHeaderRadius = 12,\n      header,\n      body,\n      isBackDrop = false,\n      isModal,\n      dragEnabled = true,\n      isAnimatedYFromParent,\n      animatedValueY,\n      containerStyle,\n      bodyContainerStyle = {},\n      tipStyle,\n      headerStyle,\n      bodyStyle,\n      onClose,\n      bounce = 0.5,\n      keyboardAware = false,\n      keyboardAwareExtraSnapHeight = 0,\n      keyboardAwareDrag = false,\n    }: Porps,\n    ref\n  ) => {\n    const [keyboardHeight] = useKeyboard(keyboardAware);\n    const [currentSnap, setCurrentSnap] = useState(initialPosition);\n    const [_deltaY] = useState(new Animated.Value(Screen.height));\n    const bottomPanel = useRef<any>();\n    const _snapPoints = getSnapPoints(snapPoints);\n    const _initialPosition = getInitialPosition(initialPosition);\n    const isDismissWithPress = isBackDropDismissByPress\n      ? isBackDropDismissByPress\n      : false;\n    const [\n      isBottomSheetDismissed,\n      setIsBottomSheetDismissed,\n    ] = useState<boolean>(initialPosition === 0 || initialPosition === '0%');\n\n    const onDrawerSnap = (snap: any) => {\n      const index = snap.nativeEvent.index;\n      const value = snapPoints[index];\n      setCurrentSnap(value); //\n      if (value === 0 || value === '0%') {\n        setIsBottomSheetDismissed(true);\n        onClose && onClose();\n      } else {\n        setIsBottomSheetDismissed(false);\n      }\n      onChangeSnap && onChangeSnap({ index, value });\n    };\n\n    const dismissBottomSheet = () => {\n      let index = snapPoints.findIndex(\n        (x: number | string) => x === 0 || x === '0%'\n      );\n      if (index !== -1) {\n        bottomPanel.current.snapTo({ index });\n        onClose && onClose();\n      }\n      Keyboard.dismiss();\n    };\n\n    const snapTo = (index: number) => {\n      if (snapPoints.findIndex((x) => x === 0 || x === '0%') !== -1) {\n        Keyboard.dismiss();\n      }\n      bottomPanel.current.snapTo({ index });\n      const value = snapPoints[index];\n      onChangeSnap && onChangeSnap({ index, value });\n    };\n\n    useImperativeHandle(ref, () => ({\n      snapTo,\n      dismissBottomSheet,\n    }));\n\n    useEffect(() => {\n      if (keyboardAware) {\n        const currentSnapHeight = normalize(currentSnap);\n        if (keyboardHeight) {\n          const newSnapHeight = currentSnapHeight + keyboardHeight;\n          if (newSnapHeight > Screen.height) {\n            bottomPanel.current.snapToPosition({\n              x: 0,\n              y: 0 - keyboardAwareExtraSnapHeight,\n            });\n            onChangeKeyboardAwareSnap &&\n              onChangeKeyboardAwareSnap({\n                previousSnap: currentSnapHeight,\n                nextSnap: 0,\n                keyboardHeight,\n              });\n          } else {\n            bottomPanel.current.snapToPosition({\n              x: 0,\n              y: Screen.height - newSnapHeight - keyboardAwareExtraSnapHeight,\n            });\n            onChangeKeyboardAwareSnap &&\n              onChangeKeyboardAwareSnap({\n                previousSnap: currentSnapHeight,\n                nextSnap: newSnapHeight,\n                keyboardHeight,\n              });\n          }\n        } else {\n          bottomPanel.current.snapToPosition({\n            x: 0,\n            y: Screen.height - currentSnapHeight,\n          });\n        }\n      }\n    }, [keyboardHeight]);\n\n    const dragHandler = () => {\n      if (dragEnabled) {\n        if (!keyboardAwareDrag && keyboardHeight > 0) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    return (\n      <View style={styles.panelContainer} pointerEvents={'box-none'}>\n        {/* Backdrop */}\n        {isBackDrop && (\n          <Animated.View\n            pointerEvents={!isBottomSheetDismissed ? 'auto' : 'box-none'}\n            style={[\n              styles.panelContainer,\n              {\n                backgroundColor: backDropColor,\n                opacity: isAnimatedYFromParent\n                  ? animatedValueY.interpolate({\n                      inputRange: [0, Screen.height - 100],\n                      outputRange: [1, 0],\n                      extrapolateRight: Extrapolate.CLAMP,\n                    })\n                  : _deltaY.interpolate({\n                      inputRange: [0, Screen.height - 100],\n                      outputRange: [1, 0],\n                      extrapolateRight: Extrapolate.CLAMP,\n                    }),\n              },\n            ]}\n          />\n        )}\n\n        <Interactable.View\n          dragEnabled={isModal ? false : dragHandler()}\n          verticalOnly={true}\n          ref={bottomPanel}\n          snapPoints={_snapPoints}\n          initialPosition={_initialPosition}\n          boundaries={{ top: isModal ? 0 : -300, bounce: bounce }}\n          animatedValueY={isAnimatedYFromParent ? animatedValueY : _deltaY}\n          onSnap={onDrawerSnap}\n        >\n          {!isModal && isDismissWithPress && !isBottomSheetDismissed && (\n            <TapGestureHandler\n              enabled={isBackDrop}\n              onActivated={dismissBottomSheet}\n            >\n              <View\n                style={{\n                  height: Screen.height,\n                  marginTop: -Screen.height,\n                }}\n              />\n            </TapGestureHandler>\n          )}\n\n          <View\n            style={[\n              isModal ? styles.modal : styles.panel,\n              { backgroundColor: bottomSheerColor },\n              isRoundBorderWithTipHeader\n                ? [\n                    {\n                      backgroundColor: '#f7f5eee8',\n                      shadowColor: '#000000',\n                      shadowOffset: { width: 0, height: 0 },\n                      shadowRadius: 5,\n                      shadowOpacity: 0.4,\n                    },\n                    {\n                      borderTopLeftRadius: tipHeaderRadius,\n                      borderTopRightRadius: tipHeaderRadius,\n                    },\n                  ]\n                : {},\n              containerStyle,\n            ]}\n          >\n            <View\n              style={[\n                isModal ? styles.modal : styles.panel,\n                bodyContainerStyle,\n              ]}\n            >\n              {!isModal && isRoundBorderWithTipHeader && (\n                <View style={[styles.panelHandle, tipStyle]} />\n              )}\n              {!isModal && (\n                <View style={[styles.panelHeader, headerStyle]}>{header}</View>\n              )}\n              <View style={bodyStyle}>{body}</View>\n            </View>\n          </View>\n        </Interactable.View>\n      </View>\n    );\n  }\n);\n\nexport default Index;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  panelHandle: {\n    position: 'absolute',\n    alignSelf: 'center',\n    width: 40,\n    height: 6,\n    borderRadius: 4,\n    backgroundColor: '#00000040',\n    marginVertical: 8,\n  },\n  panel: {\n    height: Screen.height + 300,\n  },\n  modal: {\n    height: Screen.height + 300,\n  },\n  panelHeader: {\n    padding: 16,\n  },\n  panelContainer: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n});\n\nconst getSnapPoints = (snapPoints: any) => {\n  return snapPoints.map((snapItem: any) => {\n    if (typeof snapItem === 'string') {\n      const parentValue: any = snapItem.split('%')[0];\n      snapItem = (Screen.height / 100) * parentValue;\n    }\n    const snapObject = { y: Screen.height - snapItem };\n    return snapObject;\n  });\n};\n\nconst getInitialPosition = (snapPoint: any) => {\n  if (typeof snapPoint === 'string') {\n    const parentValue: any = snapPoint.split('%')[0];\n    snapPoint = (Screen.height / 100) * parentValue;\n  }\n  const snapObject = { y: Screen.height - snapPoint };\n  return snapObject;\n};\n"]},"metadata":{},"sourceType":"module"}