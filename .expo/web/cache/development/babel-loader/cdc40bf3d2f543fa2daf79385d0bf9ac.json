{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nvar screenHeight = Dimensions.get('window').height;\nexport var normalize = function normalize(height) {\n  if (typeof height === 'number') {\n    return height;\n  } else {\n    var elemHeight = parseFloat(height);\n    return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n  }\n};","map":{"version":3,"sources":["index.tsx"],"names":["screenHeight","Dimensions","normalize","height","elemHeight","parseFloat","PixelRatio"],"mappings":";;AAGA,IAAIA,YAAY,GAAGC,UAAU,CAAVA,GAAAA,CAAAA,QAAAA,EAAnB,MAAA;AAEA,OAAO,IAAMC,SAAS,GAAIC,SAAbD,SAAaC,CAAAA,MAAD,EAAoB;AAE3C,MAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AAC9B,WAAA,MAAA;AADF,GAAA,MAEO;AACL,QAAMC,UAAU,GAAGC,UAAU,CADxB,MACwB,CAA7B;AAGA,WAAOC,UAAU,CAAVA,mBAAAA,CAAgCN,YAAY,GAAb,UAACA,GAAvC,GAAOM,CAAP;AACD;AATI,CAAA","sourcesContent":["import { Dimensions, PixelRatio } from 'react-native';\n\n// Retrieve initial screen's height\nlet screenHeight = Dimensions.get('window').height;\n\nexport const normalize = (height: number) => {\n  // Parse string percentage input and convert it to number.\n  if (typeof height === 'number') {\n    return height;\n  } else {\n    const elemHeight = parseFloat(height);\n    // Use PixelRatio.roundToNearestPixel method in order to round the layout\n    // size (dp) to the nearest one that correspons to an integer number of pixels.\n    return PixelRatio.roundToNearestPixel((screenHeight * elemHeight) / 100);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}